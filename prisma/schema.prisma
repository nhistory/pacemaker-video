generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId       String    @unique // Clerk user ID
  email         String    @unique
  name          String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Subscription related fields
  isSubscribed  Boolean   @default(false)
  subscriptionEndDate DateTime?
  
  // Learning progress related fields
  lastLoginAt   DateTime?
  watchedVideos WatchedVideo[]
  progress      Progress[]
  purchasedCourses PurchasedCourse[]
}

model WatchedVideo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid // Application user ID (references User.id)
  videoId   String
  watchedAt DateTime @default(now())
  progress  Float    // Video watching progress (0-100%)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model Progress {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid // Application user ID (references User.id)
  courseId  String
  completed Boolean  @default(false)
  progress  Float    @default(0) // Overall course progress (0-100%)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model PurchasedCourse {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @db.Uuid // Application user ID (references User.id)
  courseId    String
  purchasedAt DateTime  @default(now())
  price       Float     // Purchase price
  status      PurchaseStatus @default(COMPLETED)
  expiresAt   DateTime? // Access expiration date (lifetime access if null)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  REFUNDED
  CANCELLED
}