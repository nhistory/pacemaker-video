generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId   String   @unique // Clerk user ID
  email     String   @unique
  name      String?
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription related fields
  isSubscribed        Boolean   @default(false)
  subscriptionEndDate DateTime?

  // Learning progress related fields
  lastLoginAt        DateTime?
  watchedVideos      WatchedVideo[]
  purchasedVideos    PurchasedVideo[] // 구매한 비디오 목록
  purchasedDocuments PurchasedDocument[]

  // 워크숍 관련 추가
  taughtWorkshops       Workshop[]             @relation("InstructorWorkshops") // 강사로서 진행하는 워크숍
  workshopRegistrations WorkshopRegistration[] // 사용자가 등록한 워크숍
}

model Video {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  videoId         String           @unique // wistia video ID
  title           String?
  description     String?
  uploadDate      DateTime         @default(now())
  price           Float? // Added Price Column
  watchedVideos   WatchedVideo[]
  purchasedVideos PurchasedVideo[]
}

model WatchedVideo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid // Application user ID (references User.id)
  videoId   String   @db.Uuid // Application video ID (references Video.id)
  watchedAt DateTime @default(now())
  progress  Float // Video watching progress (0-100%)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model PurchasedVideo {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @db.Uuid // Application user ID (references User.id)
  videoId     String   @db.Uuid // Application video ID (references Video.id)
  purchasedAt DateTime @default(now())
  price       Float // Purchase price
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model PurchasedDocument {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @db.Uuid // Application user ID (references User.id)
  documentId  String   @db.Uuid // Application document ID (references Document.id)
  purchasedAt DateTime @default(now())
  price       Float // Purchase price
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([userId, documentId])
}

model Document {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId         String              @unique // wistia document ID
  title              String?
  description        String?
  uploadDate         DateTime            @default(now())
  price              Float? // Added Price Column
  bucketUrl          String
  purchasedDocuments PurchasedDocument[]
}

model Workshop {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  price         Float? // 워크숍 자체 가격. 무료일 경우 null
  locationOrUrl String?  // 오프라인 장소 또는 온라인 링크
  status        WorkshopStatus @default(RECRUITING)

  instructorId String   @db.Uuid
  instructor   User     @relation("InstructorWorkshops", fields: [instructorId], references: [id]) // User의 Role이 INSTRUCTOR인 경우

  registrations WorkshopRegistration[] // 이 워크숍에 등록한 사용자 목록

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WorkshopRegistration {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  workshopId   String   @db.Uuid
  registeredAt DateTime @default(now())
  price        Float    // 등록 시 실제 지불한 가격

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workshop     Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)

  @@unique([userId, workshopId]) // 한 사용자는 한 워크숍에 한 번만 등록 가능
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum WorkshopStatus {
  RECRUITING // 모집중
  CLOSED     // 모집마감
  ONGOING    // 진행중
  COMPLETED  // 진행완료
}